{"remainingRequest":"/opt/atlassian/pipelines/agent/build/node_modules/babel-loader/lib/index.js??ref--3-1!/opt/atlassian/pipelines/agent/build/node_modules/cache-loader/dist/cjs.js??ref--0-0!/opt/atlassian/pipelines/agent/build/node_modules/vue-loader/lib/index.js??vue-loader-options!/opt/atlassian/pipelines/agent/build/node_modules/@vuepress/plugin-pwa/lib/SWUpdatePopup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/opt/atlassian/pipelines/agent/build/node_modules/@vuepress/plugin-pwa/lib/SWUpdatePopup.vue","mtime":1550155161675},{"path":"/opt/atlassian/pipelines/agent/build/node_modules/cache-loader/dist/cjs.js","mtime":1550155146974},{"path":"/opt/atlassian/pipelines/agent/build/node_modules/babel-loader/lib/index.js","mtime":1550155146903},{"path":"/opt/atlassian/pipelines/agent/build/node_modules/cache-loader/dist/cjs.js","mtime":1550155146974},{"path":"/opt/atlassian/pipelines/agent/build/node_modules/vue-loader/lib/index.js","mtime":1550155147175}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* global SW_UPDATE_POPUP */\nimport event from './event';\nimport { normalizeConfig } from '@app/util';\nimport { popupConfig as defaultPopupConfig } from './i18n';\nexport default {\n  data: function data() {\n    return {\n      rawPopupConfig: SW_UPDATE_POPUP,\n      updateEvent: null\n    };\n  },\n  created: function created() {\n    event.$on('sw-updated', this.onSWUpdated);\n\n    if (SW_UPDATE_POPUP === true) {\n      this.rawPopupConfig = defaultPopupConfig;\n    }\n  },\n  computed: {\n    popupConfig: function popupConfig() {\n      return normalizeConfig(this, this.rawPopupConfig);\n    },\n    enabled: function enabled() {\n      return Boolean(this.popupConfig && this.updateEvent);\n    },\n    message: function message() {\n      var c = this.popupConfig;\n      return c && c.message || defaultPopupConfig['/'].message;\n    },\n    buttonText: function buttonText() {\n      var c = this.popupConfig;\n      return c && c.buttonText || defaultPopupConfig['/'].buttonText;\n    }\n  },\n  methods: {\n    onSWUpdated: function onSWUpdated(e) {\n      this.updateEvent = e;\n    },\n    reload: function reload() {\n      if (this.updateEvent) {\n        this.updateEvent.skipWaiting().then(function () {\n          location.reload(true);\n        });\n        this.updateEvent = null;\n      }\n    }\n  }\n};",null]}