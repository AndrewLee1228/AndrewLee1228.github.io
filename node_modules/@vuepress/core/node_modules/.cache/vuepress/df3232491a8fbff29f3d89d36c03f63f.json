{"remainingRequest":"/opt/atlassian/pipelines/agent/build/node_modules/babel-loader/lib/index.js??ref--3-1!/opt/atlassian/pipelines/agent/build/node_modules/cache-loader/dist/cjs.js??ref--0-0!/opt/atlassian/pipelines/agent/build/node_modules/vue-loader/lib/index.js??vue-loader-options!/opt/atlassian/pipelines/agent/build/node_modules/@vuepress/plugin-pwa/lib/SWUpdatePopup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/opt/atlassian/pipelines/agent/build/node_modules/@vuepress/plugin-pwa/lib/SWUpdatePopup.vue","mtime":1550155161675},{"path":"/opt/atlassian/pipelines/agent/build/node_modules/cache-loader/dist/cjs.js","mtime":1550155146974},{"path":"/opt/atlassian/pipelines/agent/build/node_modules/babel-loader/lib/index.js","mtime":1550155146903},{"path":"/opt/atlassian/pipelines/agent/build/node_modules/cache-loader/dist/cjs.js","mtime":1550155146974},{"path":"/opt/atlassian/pipelines/agent/build/node_modules/vue-loader/lib/index.js","mtime":1550155147175}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* global SW_UPDATE_POPUP */\nimport event from './event';\nimport { normalizeConfig } from '@app/util';\nimport { popupConfig as defaultPopupConfig } from './i18n';\nexport default {\n  data: function data() {\n    return {\n      rawPopupConfig: SW_UPDATE_POPUP,\n      updateEvent: null\n    };\n  },\n  created: function created() {\n    event.$on('sw-updated', this.onSWUpdated);\n\n    if (SW_UPDATE_POPUP === true) {\n      this.rawPopupConfig = defaultPopupConfig;\n    }\n  },\n  computed: {\n    popupConfig: function popupConfig() {\n      return normalizeConfig(this, this.rawPopupConfig);\n    },\n    enabled: function enabled() {\n      return Boolean(this.popupConfig && this.updateEvent);\n    },\n    message: function message() {\n      var c = this.popupConfig;\n      return c && c.message || defaultPopupConfig['/'].message;\n    },\n    buttonText: function buttonText() {\n      var c = this.popupConfig;\n      return c && c.buttonText || defaultPopupConfig['/'].buttonText;\n    }\n  },\n  methods: {\n    onSWUpdated: function onSWUpdated(e) {\n      this.updateEvent = e;\n    },\n    reload: function reload() {\n      if (this.updateEvent) {\n        this.updateEvent.skipWaiting().then(function () {\n          location.reload(true);\n        });\n        this.updateEvent = null;\n      }\n    }\n  }\n};",{"version":3,"sources":["/opt/atlassian/pipelines/agent/build/node_modules/@vuepress/plugin-pwa/lib/SWUpdatePopup.vue"],"names":["event","normalizeConfig","popupConfig","defaultPopupConfig","data","rawPopupConfig","SW_UPDATE_POPUP","updateEvent","created","$on","onSWUpdated","computed","enabled","Boolean","message","c","buttonText","methods","e","reload","skipWaiting","then","location"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAP,MAAkB,SAAlB;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,SAASC,WAAW,IAAIC,kBAAxB,QAAkD,QAAlD;AAEA,eAAe;AACbC,EAAAA,IADa,kBACL;AACN,WAAO;AACLC,MAAAA,cAAc,EAAEC,eADX;AAELC,MAAAA,WAAW,EAAE;AAFR,KAAP;AAID,GANY;AAQbC,EAAAA,OARa,qBAQF;AACTR,IAAAA,KAAK,CAACS,GAAN,CAAU,YAAV,EAAwB,KAAKC,WAA7B;;AACA,QAAIJ,eAAe,KAAK,IAAxB,EAA8B;AAC5B,WAAKD,cAAL,GAAsBF,kBAAtB;AACD;AACF,GAbY;AAebQ,EAAAA,QAAQ,EAAE;AACRT,IAAAA,WADQ,yBACO;AACb,aAAOD,eAAe,CAAC,IAAD,EAAO,KAAKI,cAAZ,CAAtB;AACD,KAHO;AAKRO,IAAAA,OALQ,qBAKG;AACT,aAAOC,OAAO,CAAC,KAAKX,WAAL,IAAoB,KAAKK,WAA1B,CAAd;AACD,KAPO;AASRO,IAAAA,OATQ,qBASG;AACT,UAAMC,CAAC,GAAG,KAAKb,WAAf;AACA,aAAQa,CAAC,IAAIA,CAAC,CAACD,OAAR,IAAoBX,kBAAkB,CAAC,GAAD,CAAlB,CAAwBW,OAAnD;AACD,KAZO;AAcRE,IAAAA,UAdQ,wBAcM;AACZ,UAAMD,CAAC,GAAG,KAAKb,WAAf;AACA,aAAQa,CAAC,IAAIA,CAAC,CAACC,UAAR,IAAuBb,kBAAkB,CAAC,GAAD,CAAlB,CAAwBa,UAAtD;AACD;AAjBO,GAfG;AAmCbC,EAAAA,OAAO,EAAE;AACPP,IAAAA,WADO,uBACMQ,CADN,EACS;AACd,WAAKX,WAAL,GAAmBW,CAAnB;AACD,KAHM;AAKPC,IAAAA,MALO,oBAKG;AACR,UAAI,KAAKZ,WAAT,EAAsB;AACpB,aAAKA,WAAL,CAAiBa,WAAjB,GAA+BC,IAA/B,CAAoC,YAAM;AACxCC,UAAAA,QAAQ,CAACH,MAAT,CAAgB,IAAhB;AACD,SAFD;AAGA,aAAKZ,WAAL,GAAmB,IAAnB;AACD;AACF;AAZM;AAnCI,CAAf","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* global SW_UPDATE_POPUP */\nimport event from './event'\nimport { normalizeConfig } from '@app/util'\nimport { popupConfig as defaultPopupConfig } from './i18n'\n\nexport default {\n  data () {\n    return {\n      rawPopupConfig: SW_UPDATE_POPUP,\n      updateEvent: null\n    }\n  },\n\n  created () {\n    event.$on('sw-updated', this.onSWUpdated)\n    if (SW_UPDATE_POPUP === true) {\n      this.rawPopupConfig = defaultPopupConfig\n    }\n  },\n\n  computed: {\n    popupConfig () {\n      return normalizeConfig(this, this.rawPopupConfig)\n    },\n\n    enabled () {\n      return Boolean(this.popupConfig && this.updateEvent)\n    },\n\n    message () {\n      const c = this.popupConfig\n      return (c && c.message) || defaultPopupConfig['/'].message\n    },\n\n    buttonText () {\n      const c = this.popupConfig\n      return (c && c.buttonText) || defaultPopupConfig['/'].buttonText\n    }\n  },\n\n  methods: {\n    onSWUpdated (e) {\n      this.updateEvent = e\n    },\n\n    reload () {\n      if (this.updateEvent) {\n        this.updateEvent.skipWaiting().then(() => {\n          location.reload(true)\n        })\n        this.updateEvent = null\n      }\n    }\n  }\n}\n"]}]}